<?xml version="1.0"?>
<implementation>
	<functions>
        --  Pilote your Samsung smart TV
        -- 
        -- Author: Antor
        -- Date: 05/08/2012
        --
                
        
        local STVR_SID = "urn:mcv:serviceId:SamsungTVRemote1"
        local SWT_SID = "urn:upnp-org:serviceId:SwitchPower1"
        local HAD_SID = "urn:micasaverde-com:serviceId:HaDevice1"
        
        function readVariableOrInit(lul_device, devicetype, name, defaultValue) 
            local var = luup.variable_get(devicetype,name, lul_device)
            if (var == nil) then
                var = defaultValue
                luup.variable_set(devicetype,name,var,lul_device)
            end
            return var
        end
        
        function writeVariable(lul_device,devicetype, name, value) 
            luup.variable_set(devicetype,name,value,lul_device)
        end
        
		function init (lul_device)
            local data = readSettings(lul_device)
            
            luup.variable_set(HAD_SID, "LastUpdate", os.time(os.date('*t')), lul_device)
            luup.variable_set(HAD_SID, "Configured", "1", lul_device)
            
            if (data.PingDelay ~= "" and data.PingDelay ~= nill) then
                luup.call_timer("Ping", 1 , data.PingDelay, "", tostring(lul_device))
            end
		end
        
        function url_encode(str)
            if (str) then
                str = string.gsub (str, "\n", "\r\n")
                str = string.gsub (str, "([^%w ])",
                function (c) return string.format ("%%%02X", string.byte(c)) end)
                str = string.gsub (str, " ", "+")
            end
            return str	
        end
        
        -- character table string
        local b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

        -- encoding
        function enc(data)
            return ((data:gsub(".", function(x) 
                local r,b="",x:byte()
                for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)&gt;0 and "1" or "0") end
                return r;
            end).."0000"):gsub("%d%d%d?%d?%d?%d?", function(x)
                if (#x &lt; 6) then return "" end
                local c=0
                for i=1,6 do c=c+(x:sub(i,i)=="1" and 2^(6-i) or 0) end
                return b:sub(c+1,c+1)
            end)..({ "", "==", "=" })[#data%3+1])
        end

        -- decoding
        function dec(data)
            data = string.gsub(data, "[^"..b.."=]", "")
            return (data:gsub(".", function(x)
                if (x == "=") then return "" end
                local r,f="",(b:find(x)-1)
                for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)&gt;0 and "1" or "0") end
                return r;
            end):gsub("%d%d%d?%d?%d?%d?%d?%d?", function(x)
                if (#x ~= 8) then return "" end
                local c=0
                for i=1,8 do c=c+(x:sub(i,i)=="1" and 2^(8-i) or 0) end
                return string.char(c)
            end))
        end
        
        function executePing(address)
            local returnCode = os.execute("ping -c 1 " .. address)

            if (returnCode == 0) then
                -- everything is fine, we reached the host
                return "1"
            else
                -- something went wrong here
                -- log("abnormal exit while ping execution. ErrorCode: " .. tostring(returnCode))
                return "0"
            end
        end
        
        function readSettings(lul_device)
            local data = {}
            
            -- Config variable
            data.TVIp = readVariableOrInit(lul_device,STVR_SID, "TV Ip", "" )
            data.PingDelay = readVariableOrInit(lul_device,STVR_SID, "Ping Delay", "" )
            data.MyIp = "192.168.1.200" -- Doesn"t seem to be really used
            data.MyMac = "00-0c-29-3e-b1-4f" -- Used for the access control/validation, but not after that AFAIK
            data.AppString = "iphone..iapp.samsung" -- What the iPhone app reports
            data.TvAppString = "iphone." .. readVariableOrInit(lul_device,STVR_SID, "TV App String", "UE46D6300") .. ".iapp.samsung" -- Might need changing to match your TV type
            data.remotename = "Vera Samsung Remote" --What gets reported when it asks for permission; also shows in General  Wireless Remote Control menu
            
            return data
        end
        
        function Ping(lul_device)
            lul_device = tonumber(lul_device)
            local data = readSettings(lul_device)
            local ping = executePing(data.TVIp)
            
            luup.variable_set (SWT_SID, "Target", ping, lul_device)
            luup.variable_set (SWT_SID, "Status", ping, lul_device)
            
            log("Ping = " .. ping .. " Next ping in " .. data.PingDelay .. ".")
            --luup.call_timer("Ping", 1 , data.PingDelay, "", tostring(lul_device))
        end

        function SendKey(lul_device, KeyString)
            local ipencoded, macencoded, messagepart1, Keyencoded, part1, messagepart2, part2, messagepart3, part3
            local data = readSettings(lul_device)
            
            -- Open socket
            socket=require("socket")
            local client = socket.connect( data.TVIp , 55000 ) 
            
            -- Prepare message
            ipencoded = enc(data.MyIp)
            macencoded = enc(data.MyMac)
            remoteencoded = enc(data.remotename)
            
            messagepart1 = string.char(0x64) .. string.char(0x00) .. string.char(ipencoded:len()) .. string.char(0x00) .. ipencoded .. string.char(macencoded:len()) .. string.char(0x00) .. macencoded .. string.char(remoteencoded:len()) .. string.char(0x00) .. remoteencoded
            
            part1 = string.char(0x00) .. string.char(data.AppString:len()) .. string.char(0x00) .. data.AppString .. string.char(messagepart1:len()) .. string.char(0x00) .. messagepart1
            log(part1)
            
            client:send(part1)
            --client:receive()
            
            messagepart2 = string.char(0xc8) .. string.char(0x00)
            part2 = string.char(0x00) .. string.char(data.AppString:len()) .. string.char(0x00) .. data.AppString .. string.char(messagepart2:len()) .. string.char(0x00) .. messagepart2
            client:send(part2)
            
            
            Keyencoded = enc(KeyString)
            messagepart3 = string.char(0x00) .. string.char(0x00) .. string.char(0x00) .. string.char(Keyencoded:len()) .. string.char(0x00) .. Keyencoded
            part3 = string.char(0x00) .. string.char(data.TvAppString:len()) .. string.char(0x00) .. data.TvAppString .. string.char(messagepart3:len()) .. string.char(0x00) .. messagepart3
            client:send(part3)
            
        end

        function SendText(lul_device, Text)
            local ipencoded, macencoded, messagepart1, Textencoded, part1, messagepart2, part2, messagepart3, part3
            local data = readSettings(lul_device)
            
            -- Open socket
            socket=require("socket")
            local client = socket.connect( data.TVIp , 55000 ) 
            
            -- Prepare message
            ipencoded = enc(data.MyIp)
            macencoded = enc(data.MyMac)
            remoteencoded = enc(data.remotename)
            
            messagepart1 = string.char(0x64) .. string.char(0x00) .. string.char(ipencoded:len()) .. string.char(0x00) .. ipencoded .. string.char(macencoded:len()) .. string.char(0x00) .. macencoded .. string.char(remoteencoded:len()) .. string.char(0x00) .. remoteencoded
            
            part1 = string.char(0x00) .. string.char(data.AppString:len()) .. string.char(0x00) .. data.AppString .. string.char(messagepart1:len()) .. string.char(0x00) .. messagepart1
            log(part1)
            
            client:send(part1)
            --client:receive()
            
            messagepart2 = string.char(0xc8) .. string.char(0x00)
            part2 = string.char(0x00) .. string.char(data.AppString:len()) .. string.char(0x00) .. data.AppString .. string.char(messagepart2:len()) .. string.char(0x00) .. messagepart2
            client:send(part2)

            
            --Text : Send text, e.g. in YouTube app's search, N.B. NOT BBC iPlayer app.
            Textencoded = enc(Text)
            messagepart3 = string.char(0x01) .. string.char(0x00) ..string.char(Textencoded:len()) .. string.char(0x00) .. Textencoded
            part3 = string.char(0x01) .. string.char(data.TvAppString:len()) .. string.char(0x00) .. data.TvAppString .. string.char(messagepart3:len()) .. string.char(0x00) .. messagepart3
            client:send(part3)            
            
        end

        function log(msg) 
            luup.log("STVR : " .. msg)
        end

	</functions>
	<startup>init</startup>
	<actionList>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
                log("SetTarget")
                 if lul_settings.newTargetValue == "0" then
                    SendKey(lul_device, "KEY_POWEROFF")
                 end
                 return 4,5
			</job>
		</action>
		<action>
			<serviceId>urn:mcv:serviceId:SamsungTVRemote1</serviceId>
			<name>SendKey</name>
			<job>
                log("SendKey")
                --lul_settings
                SendKey(lul_device, lul_settings.KeyString)
                return 4,5
			</job>
		</action>
		<action>
			<serviceId>urn:mcv:serviceId:SamsungTVRemote1</serviceId>
			<name>SendText</name>
			<job>
                log("SendText")
                --lul_settings
                SendKey(lul_device, Text)
                return 4,5
            </job>
		</action>
	</actionList>
</implementation>