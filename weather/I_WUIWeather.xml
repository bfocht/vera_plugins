<?xml version="1.0"?>
<implementation>
  <settings>
    <protocol>cr</protocol>
  </settings>
  <functions>
    --
    -- Device Implementation file to retrieve Weather information from the Weather Underground (WUI) service
    -- on www.wunderground.com.
    --
    local http = require("socket.http")
    -- 5 Second timeout
    http.TIMEOUT = 5

    local WEATHER_SERVICE = "urn:upnp-micasaverde-com:serviceId:Weather1"
    local TEMPERATURE_SERVICE = "urn:upnp-org:serviceId:TemperatureSensor1"
    local HADEVICE_SERVICE = "urn:micasaverde-com:serviceId:HaDevice1"
    local HUMIDITY_SERVICE = "urn:micasaverde-com:serviceId:HumiditySensor1"

    local SERVICE_LOC_URL = "https://api.wunderground.com/api/%s/conditions/forecast/q/%s.xml"
    local SERVICE_LL_URL = "https://api.wunderground.com/api/%s/conditions/forecast/q/%#.6f,%#.6f.xml"

    local MSG_CLASS = "WUIWeather"
    


    local WEATHER_PATTERN, tmp = string.gsub([[&lt;response>.*
        &lt;current_observation>.*&lt;observation_location>.*
        &lt;full>(.-)&lt;/full>.*
        &lt;latitude>(.-)&lt;/latitude>.*&lt;longitude>(.-)&lt;/longitude>.*&lt;/observation_location>.*
        &lt;observation_epoch>(%d-)&lt;/observation_epoch>.*
        &lt;weather>(.*)&lt;/weather>.*
        &lt;temp_f>(.-)&lt;/temp_f>.*&lt;temp_c>(.-)&lt;/temp_c>.*
        &lt;relative_humidity>(%d-)%%&lt;/relative_humidity>.*
        &lt;wind_string>(.*)&lt;/wind_string>.*&lt;wind_dir>(%a-)&lt;/wind_dir>.*&lt;wind_mph>(.-)&lt;/wind_mph>.*&lt;wind_kph>(.-)&lt;/wind_kph>.*&lt;icon>(.-)&lt;/icon>.*
        &lt;/current_observation>.*
        &lt;forecast>.*&lt;simpleforecast>&lt;forecastdays>&lt;forecastday>.*&lt;period>1&lt;/period>
        &lt;high>&lt;fahrenheit>(.-)&lt;/fahrenheit>&lt;celsius>(.-)&lt;/celsius>&lt;/high>
        &lt;low>&lt;fahrenheit>(.-)&lt;/fahrenheit>&lt;celsius>(.-)&lt;/celsius>&lt;/low>.*
        &lt;/forecastday>.*&lt;forecastday>.*&lt;period>2&lt;/period>.*
]], "%s*", "")

    local DEBUG_MODE = false
    local taskHandle = -1

    local TASK_ERROR = 2
    local TASK_ERROR_PERM = -2
    local TASK_SUCCESS = 4
    local TASK_BUSY = 1

    local function log(text, level)
        luup.log(string.format("%s: %s", MSG_CLASS, text), (level or 50))
    end

    local function debug(text)
        if (DEBUG_MODE == true) then
            log("debug: " .. text, 35)
        end
    end

    local function task(text, mode)
        luup.log("task " .. text)
        if (mode == TASK_ERROR_PERM) then
            taskHandle = luup.task(text, TASK_ERROR, MSG_CLASS, taskHandle)
        else
            taskHandle = luup.task(text, mode, MSG_CLASS, taskHandle)

            -- Clear the previous error, since they're all transient
            if (mode ~= TASK_SUCCESS) then
                luup.call_delay("clearTask", 30, "", false)
            end
        end
    end

    --
    -- Has to be "non-local" in order for MiOS to call it :(
    --
    function clearTask()
        task("Clearing...", TASK_SUCCESS)
    end


    --- Find the named Child device of [this] Device.
    --
    -- This function will enumerate the Master/Global list of devices in Vera and
    -- locate the "named" Child device.  It's used all over to locate the Children.
    --
    --   "Why haven't you checked the children"  :)
    --
    -- This would make an awfully handy convenience method on a Device object... hint, hint.
    --
    local function findChild(parentDevice, label)
        for k, v in pairs(luup.devices) do
            if (v.device_num_parent == parentDevice
                and v.id == label) then
                return k
            end
        end

        -- Dump a copy of the Global Module list for debugging purposes.
        log("findChild cannot find parentDevice: " .. tostring(parentDevice) .. " label: " .. label)
        for k, v in pairs(luup.devices) do
            log("Device Number: " .. k ..
                " v.device_type: " .. tostring(v.device_type) ..
                " v.device_num_parent: " .. tostring(v.device_num_parent) ..
                " v.id: " .. tostring(v.id)
            )
        end
    end

    local function fetchWeather(key, latitude, longitude)
        local st = os.time()
        --
        -- And some test code that call's WUI's Weather API/URL.
        --

        local serverURL, xml, status
        serverURL = SERVICE_LL_URL:format(key, latitude, longitude)
       
        --log("fetchWeather: " .. serverURL)

        xml, status = http.request(serverURL)
        xml = xml:gsub(">%s*&lt;", ">&lt;")

        --log("fetchWeather: Successful execution of URL xml=" .. xml)

        local observationLoc, lat, long, epoch, condition,
              currentTempF, currentTempC,
              currentHumidity,
              windCondition, windDirection, windMPH, windKPH, icon,
              forecastHighTempF, forecastHighTempC, forecastLowTempF, forecastLowTempC
            = xml:match(WEATHER_PATTERN)

        if (lat == nil) then
            return false,
                   string.format("Unable to parse result for url=%s, xml=%s", serverURL, (xml or "no result"))
        else
            return true,
                  {observationLoc=observationLoc, lat=lat, long=long, epoch=epoch,
                   condition=condition, conditionGroup=icon,
                   currentTempF=currentTempF, currentTempC=currentTempC,
                   currentHumidity=currentHumidity,
                   windCondition=windCondition, windDirection=windDirection, windMPH=windMPH, windKPH=windKPH,
                   forecastHighTempF=forecastHighTempF, forecastHighTempC=forecastHighTempC,
                   forecastLowTempF=forecastLowTempF, forecastLowTempC=forecastLowTempC,
                   serverURL=serverURL}
        end
    end

    function refreshCache()
        --
        -- And some test code that call's WUI's [unofficial] Weather API/URL/
        --
        -- Many thanks to the recommendations of both @LibraSun and @Ap15e from
        -- the micasaverde.com forums for providing various pointers to alternative
        -- Weather services.
        --
        --debug("refreshCache called")
        --
 

        --
        -- Resubmit the refreshCache job, unless the period==0 (disabled/manual)
        --
        --if (period ~=0) then
        --    luup.call_timer("refreshCache", 1, tostring(period), "")
        --end

        --
        -- If the Location override is set, use it's value, otherwise we'll format a string 
        -- using the Lat/Long that Vera Provides.
        -- We pre-process the user-provided string to pseudo URL-Encode the Value.
        --
        local key = luup.variable_get(WEATHER_SERVICE, "ProviderKey", PARENT_DEVICE)
        
        local status, result = fetchWeather(key, LATITUDE, LONGITUDE)

        if (status) then
          debug("refreshCache: Successful execution of WUI URL")

          local windSpeed, currentTemp, forecastLowTemp, forecastHighTemp

          local metric = (luup.variable_get(WEATHER_SERVICE, "Metric", PARENT_DEVICE) == "1")
          if (metric) then
            currentTemp = result.currentTempC
            forecastLowTemp = result.forecastLowTempC
            forecastHighTemp = result.forecastHighTempC
            windSpeed = result.windKPH
          else
            currentTemp = result.currentTempF
            forecastLowTemp = result.forecastLowTempF
            forecastHighTemp = result.forecastHighTempF
            windSpeed = result.windMPH
          end

          --
          -- For demo, print a set of values showing them individually pulled out.
          --
          local weather_string = string.format("Requested [%s,%s], got [%s,%s] (%s).\n it is currently %s and %s (%s).  Humidity is %s%%.  Low is %s High is %s.  Condition is %s, Wind Condition is %s, Direction is %s, Speed is %s",
            LATITUDE,
            LONGITUDE,
            result.lat,
            result.long,
            result.observationLoc,
            currentTemp,
            result.condition,
            result.conditionGroup,
            result.currentHumidity,
            forecastLowTemp,
            forecastHighTemp,
            result.condition,
            result.windCondition,
            result.windDirection,
            windSpeed)
	    
	  luup.call_action( "urn:upnp-smtp-svc:serviceId:SND1", "SendMail", { subject = 'Weather Update', body = weather_string }, 54)
          -- Store the current timestamp
          local ta = os.date("*t")
	  local s = string.format("%d-%02d-%02d %02d:%02d:%02d", ta.year, ta.month, ta.day, ta.hour, ta.min, ta.sec)
          luup.variable_set(HADEVICE_SERVICE, "LastUpdate", s, PARENT_DEVICE)

	  --store the observation location
	  luup.variable_set(WEATHER_SERVICE, "LocationUsed", string.format("%s,%s", result.lat, result.long), PARENT_DEVICE)
	  luup.variable_set(WEATHER_SERVICE, "LocationUsedText", result.observationLoc, PARENT_DEVICE)

          -- Store the current temperature
          luup.variable_set(TEMPERATURE_SERVICE, "CurrentTemperature", currentTemp, CURRENT_TEMPERATURE_DEVICE)

          -- Store the current temperature
          luup.variable_set(TEMPERATURE_SERVICE, "CurrentTemperature", forecastLowTemp, FORECAST_LOW_TEMPERATURE_DEVICE)

          -- Store the current temperature
          luup.variable_set(TEMPERATURE_SERVICE, "CurrentTemperature", forecastHighTemp, FORECAST_HIGH_TEMPERATURE_DEVICE)

          -- Store the current humidity
          luup.variable_set(HUMIDITY_SERVICE, "CurrentLevel", result.currentHumidity, CURRENT_HUMIDITY_DEVICE)

          -- Store the current Condition (eg. "Sunny"), note these values are subject to i18n
          luup.variable_set(WEATHER_SERVICE, "Condition", result.condition, PARENT_DEVICE)

          -- Store the current Condition Grouping (eg. "partlycloudy"), note these values are NOT subject to i18n
          luup.variable_set(WEATHER_SERVICE, "ConditionGroup", result.conditionGroup, PARENT_DEVICE)

          -- Store the current Wind Condition (eg: "W at 9 mph"), Direction (eg: "W") and Speed (eg: "9" or "14" if metric)
          luup.variable_set(WEATHER_SERVICE, "WindCondition", result.windCondition, PARENT_DEVICE)
          luup.variable_set(WEATHER_SERVICE, "WindDirection", result.windDirection, PARENT_DEVICE)
          luup.variable_set(WEATHER_SERVICE, "WindSpeed", windSpeed, PARENT_DEVICE)
        else
          log("fetchWeather returned error=" .. result)
        end
        task("Weather Check Complete",TASK_SUCCESS)
    end

    function startupDeferred()
        local key = luup.variable_get(WEATHER_SERVICE, "ProviderKey", PARENT_DEVICE)
        if (key == nil or key == "") then
            --
            -- Set the variable so that it appears in the Device/Advanced list
            --
            luup.variable_set(WEATHER_SERVICE, "ProviderKey", "", PARENT_DEVICE)
            luup.variable_set(WEATHER_SERVICE, "ProviderName", "WUI (Weather Underground)", PARENT_DEVICE)
            luup.variable_set(WEATHER_SERVICE, "ProviderURL", "http://www.wunderground.com", PARENT_DEVICE)
    
            local msg = "Registration Key needed from Weather Underground (www.wunderground.com)"
            task(msg, TASK_ERROR_PERM)
            return
        end
    end

    function startup(parentDevice)
        local CURRENT_TEMPERATURE_ID = "Weather-Current-Temperature"
        local FORECAST_HIGH_TEMPERATURE_ID = "Weather-Forecast-HighTemperature"
        local FORECAST_LOW_TEMPERATURE_ID = "Weather-Forecast-LowTemperature"
        local CURRENT_HUMIDITY_ID = "Weather-Current-Humidity"

        log("#" .. tostring(parentDevice) .. " starting up with id " .. luup.devices[parentDevice].id)

        --
        -- Build child devices for each type of metric we're gathering from WUI Weather.
        -- At this point that's:
        --     Weather-Current-Temperature - the last reported Temperature at your location
        --     Weather-Current-Humidity - the last reported Humidity Level at your location
        --
        local childDevices = luup.chdev.start(parentDevice)

        luup.chdev.append(parentDevice, childDevices,
            CURRENT_TEMPERATURE_ID, "Temperature",
            "urn:schemas-micasaverde-com:device:TemperatureSensor:1", "D_TemperatureSensor1.xml",
            "S_TemperatureSensor1.xml", "", true)

        luup.chdev.append(parentDevice, childDevices,
            FORECAST_LOW_TEMPERATURE_ID, "Low Temperature",
            "urn:schemas-micasaverde-com:device:TemperatureSensor:1", "D_TemperatureSensor1.xml",
            "S_TemperatureSensor1.xml", "", true)

        luup.chdev.append(parentDevice, childDevices,
            FORECAST_HIGH_TEMPERATURE_ID, "High Temperature",
            "urn:schemas-micasaverde-com:device:TemperatureSensor:1", "D_TemperatureSensor1.xml",
            "S_TemperatureSensor1.xml", "", true)

        luup.chdev.append(parentDevice, childDevices,
            CURRENT_HUMIDITY_ID, "Humidity",
            "urn:schemas-micasaverde-com:device:HumiditySensor:1", "D_HumiditySensor1.xml",
            "S_HumiditySensor1.xml", "", true)

        luup.chdev.sync(parentDevice, childDevices)

        --
        -- Note these are "pass-by-Global" values that refreshCache will later use.
        -- I need a var-args version of luup.call_timer(...) to pass these in a
        -- cleaner manner.
        --

        PARENT_DEVICE = parentDevice
        CURRENT_TEMPERATURE_DEVICE = findChild(parentDevice, CURRENT_TEMPERATURE_ID)
        FORECAST_LOW_TEMPERATURE_DEVICE = findChild(parentDevice, FORECAST_LOW_TEMPERATURE_ID)
        FORECAST_HIGH_TEMPERATURE_DEVICE = findChild(parentDevice, FORECAST_HIGH_TEMPERATURE_ID)
        CURRENT_HUMIDITY_DEVICE = findChild(parentDevice, CURRENT_HUMIDITY_ID)


        --
        -- Handle all potential values received for a boolean-type UPnP Variable, and
        -- convert them to their "strongly recommended" values of "0" or "1".
        --
        local metric = luup.variable_get(WEATHER_SERVICE, "Metric", parentDevice)
        if (metric == "0" or metric == "1") then
            -- Do nothing, value is correct
        elseif ((metric == "true") or (metric == "yes")) then
            luup.variable_set(WEATHER_SERVICE, "Metric", "1", parentDevice)
        elseif ((metric == nil) or (metric == "false") or (metric == "no")) then
            luup.variable_set(WEATHER_SERVICE, "Metric", "0", parentDevice)
        else 
            -- For all other values, silently default to Metric, to make it idiot proof. 
            luup.variable_set(WEATHER_SERVICE, "Metric", "1", parentDevice)
            debug("Metric parameter silently converted to 1, oldValue=" .. metric)
        end

        --
        -- Do this deferred to avoid slowing down startup processes.
        --
        --luup.call_timer("startupDeferred", 1, "1", "")
    end
  </functions>
  <incoming>
      debug("Incoming, really?")
  </incoming>
  <startup>startup</startup>
  <actionList>
    <action>
      <serviceId>urn:upnp-micasaverde-com:serviceId:Weather1</serviceId>
      <name>SetUnitsMetric</name>
      <run>
        luup.variable_set(WEATHER_SERVICE, "Metric", "1", lul_device)
      </run>
    </action>
    <action>
      <serviceId>urn:upnp-micasaverde-com:serviceId:Weather1</serviceId>
      <name>SetUnitsUS</name>
      <run>
        luup.variable_set(WEATHER_SERVICE, "Metric", "0", lul_device)
      </run>
    </action>
    <action>
      <serviceId>urn:micasaverde-com:serviceId:HaDevice1</serviceId>
      <name>Poll</name>
      <run>
        task("Check Weather Start", TASK_BUSY)
        -- Force refreshCache to get called in a Timer
        luup.call_timer("refreshCache", 1, "1", "")
      </run>
    </action>
    </actionList>
</implementation>
